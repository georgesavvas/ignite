"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[291],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),y=a,h=u["".concat(l,".").concat(y)]||u[y]||p[y]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o="Glossary",s={unversionedId:"glossary",id:"glossary",title:"Glossary",description:"Anchor",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/docs/glossary",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"REST API",permalink:"/docs/Developer/rest_api"}},l={},c=[{value:"Anchor",id:"anchor",level:3},{value:"Asset",id:"asset",level:3},{value:"AssetVersion",id:"assetversion",level:3},{value:"Attribute",id:"attribute",level:3},{value:"Build",id:"build",level:3},{value:"Comment",id:"comment",level:3},{value:"Component",id:"component",level:3},{value:"Context",id:"context",level:3},{value:"Directory",id:"directory",level:3},{value:"Exports",id:"exports",level:3},{value:"Group",id:"group",level:3},{value:"Project",id:"project",level:3},{value:"Projects Directory",id:"projects-directory",level:3},{value:"Scene",id:"scene",level:3},{value:"Tag",id:"tag",level:3},{value:"Task",id:"task",level:3},{value:"URI",id:"uri",level:3},{value:"Vault",id:"vault",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"glossary"},"Glossary"),(0,a.kt)("h3",{id:"anchor"},"Anchor"),(0,a.kt)("p",null,"A file in a directory that tells Ignite the type of the directory within the\nstructure of a VFX project. This is strictly formatted as ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_[type].yaml"),"\nand shouldn't be needed to be created or edited manually unless you need to\nrepair or change the type of a directory (ideally done through the UI though).\nThis file often contains useful metadata about this directory.\nExamples: ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_task.yaml"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_asset.yaml"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_scene.yaml")),(0,a.kt)("h3",{id:"asset"},"Asset"),(0,a.kt)("p",null,'A directory containing all the versions (AssetVersions in Ignite) of a\nspecific export.\nFor example there can be a "car" asset on the filesystem which\nwill merely contain the "v001", "v002" and "v003" AssetVersion directories\ninside.\nMarked by a file named ',(0,a.kt)("inlineCode",{parentName:"p"},".ign_asset.yaml")),(0,a.kt)("h3",{id:"assetversion"},"AssetVersion"),(0,a.kt)("p",null,'A directory containing exported files (Components in Ignite). This could be a\nrender in the form of an image sequence or a video file, geometry files such as\nusd, alembic and FBX or any other type of file.\nIt can also contain a thumbnail image, a preview\ndirectory containing an image sequence for dynamic thumbnails and/or a source\ndirectory containing the source (Scene) of the export.\nAssetVersions are numbered (v001, v002, v003 being 1, 2 and 3) but there\nis also a "latest" and "best" AssetVersion.\nMarked by a file named ',(0,a.kt)("inlineCode",{parentName:"p"},".ign_assetversion.yaml")),(0,a.kt)("h3",{id:"attribute"},"Attribute"),(0,a.kt)("p",null,'Named values stored on any directory that get translated into environment\nvariables when launching an app through Ignite.\nFor example an attribute called "Start Frame" will be accessible within apps\nusing the "IGNITE_ATTRIB_STARTFRAME" env var.\nFor supported apps Ignite will also assign some attribute values to the\nequivalent env vars that the app understands, such\nas "Start Frame" -> "FSTART" in Houdini.'),(0,a.kt)("h3",{id:"build"},"Build"),(0,a.kt)("p",null,'A directory that defines an asset build. Usually contains a set of tasks, with\nan "Asset" task containing the final exports for the asset build.\nMarked by a file named ',(0,a.kt)("inlineCode",{parentName:"p"},".ign_build.yaml")),(0,a.kt)("h3",{id:"comment"},"Comment"),(0,a.kt)("p",null,"A description added to a Scene."),(0,a.kt)("h3",{id:"component"},"Component"),(0,a.kt)("p",null,"A file or sequence of files within an AssetVersion."),(0,a.kt)("h3",{id:"context"},"Context"),(0,a.kt)("p",null,"The parent path to a directory or file relative to its Group."),(0,a.kt)("h3",{id:"directory"},"Directory"),(0,a.kt)("p",null,"A directory that can contain any other directory.\nMarked by a file named ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_directory.yaml")),(0,a.kt)("h3",{id:"exports"},"Exports"),(0,a.kt)("p",null,"Coming soon!"),(0,a.kt)("h3",{id:"group"},"Group"),(0,a.kt)("p",null,"A directory at the root of a project used to separate different parts of it such\nas an asset builds section, a sequences or episodes section, an unreal project\nsection or a project exports section.\nMarked by a file named ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_group.yaml")),(0,a.kt)("h3",{id:"project"},"Project"),(0,a.kt)("p",null,"A directory that is the root of a project. Should be inside the\nprojects directory.\nMarked by a file named ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_project.yaml")),(0,a.kt)("h3",{id:"projects-directory"},"Projects Directory"),(0,a.kt)("p",null,"The directory that contains all of your projects. This can be changed as needed\nin case you need to store projects in multiple locations."),(0,a.kt)("h3",{id:"scene"},"Scene"),(0,a.kt)("p",null,"A directory containing the scene files for an app.\nMarked by a file named ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_scene.yaml")),(0,a.kt)("h3",{id:"tag"},"Tag"),(0,a.kt)("p",null,'Labels assigned to directories (usually Assets and AssetVersions) to categorise\nor distinguish them from the rest. In the case of AssetVersions, special tags\n"Approved" and "Deprecated" raise or lower the way AssetVersions are scored\nwhen fetching the "latest" or "best" one.'),(0,a.kt)("h3",{id:"task"},"Task"),(0,a.kt)("p",null,"A directory where the actual work is done. This is where scenes and exports are\ncreated in.\nMarked by a file named ",(0,a.kt)("inlineCode",{parentName:"p"},".ign_task.yaml")),(0,a.kt)("h3",{id:"uri"},"URI"),(0,a.kt)("p",null,"A string that uniquely identifies an Ignite entity (directory or file) within\na project directory."),(0,a.kt)("h3",{id:"vault"},"Vault"),(0,a.kt)("p",null,"Ignite's asset library. Lives inside the project directory so each one has its\nown unique Vault."))}p.isMDXComponent=!0}}]);